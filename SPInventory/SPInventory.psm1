<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2018 v5.5.152
     Generated on:       6/11/2018 2:50 AM
     Generated by:       Administrator
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2018
#>


<#	
	 Created by:   	Evgeni Petrov
	 Filename:     	SPInventory.psm1
	 Module Name: SPInventory
#>



function Export-SPIObject
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[string]$Output
	)
	
	$spiobject = Get-SPIObject
	$spiobject | Export-Clixml -LiteralPath $Output 
}

Export-ModuleMember -Function Export-SPIObject


function Get-SPIObject
{
	[CmdletBinding()]
	param ()
	
	Add-PSSnapin Microsoft.SharePoint.PowerShell -ErrorAction SilentlyContinue
	
	$spFarm = Get-SPFarm
	$spDatabase = Get-SPDatabase
	$spServer = Get-SPServer
	$spServiceInstance = Get-SPServiceInstance
	$spWebApplication = Get-SPWebApplication -IncludeCentralAdministration
	$spSite = $spWebApplication | Get-SPSite -Limit All
	$spAlternateUrl = Get-SPAlternateURL
	$quotaTemplates = [Microsoft.SharePoint.Administration.SPWebService]::ContentService.QuotaTemplates
	$spEnterpriseSearchServiceApplication = Get-SPEnterpriseSearchServiceApplication
	$spServiceApplication = Get-SPServiceApplication
	$spFeature = Get-SPFeature
	$spSolution = Get-SPSolution
	$spManagedAccount = Get-SPManagedAccount
	
	
	$object = New-Object -TypeName System.Management.Automation.PSObject
	
	$member = Get-SPIFarmOverview
	$object | Add-Member -NotePropertyName 'FarmOverview' -NotePropertyValue $member
	
	$member = Get-SPIServersInFarm
	$object | Add-Member -NotePropertyName 'ServersInFarm' -NotePropertyValue $member
	
	$member = Get-SPIWebApplicationsAndSiteCollections
	$object | Add-Member -NotePropertyName 'WebApplicationsAndSiteCollections' -NotePropertyValue $member
	
	Write-Output $object
}


function Get-SPIFarmOverview
{
	[CmdletBinding()]
	param ()
	
	$installedSharePointVersion = $spFarm.BuildVersion.ToString()
	$license = 'Enterprise' #TODO
	$configurationDatabase = $spDatabase | Where-Object { $_.Type -eq 'Configuration Database' } | Select-Object -ExpandProperty Name
	
	$property = [ordered]@{
		'Installed SharePoint version'   = $installedSharePointVersion
		'License'					   = $license
		'Configuration database'	       = $configurationDatabase
	}
	$payload = New-Object -TypeName System.Management.Automation.PSObject -Property $property
	
	$title = "Farm Overview"
		
	$output = New-Object -TypeName System.Management.Automation.PSObject
	$output | Add-Member -MemberType NoteProperty -Name 'Title' -Value $title
	$output | Add-Member -MemberType NoteProperty -Name 'Payload' -Value $payload -TypeName 'PSCustomObject'
	Write-Output $output
}


function Get-SPIServersInFarm
{
	[CmdletBinding()]
	param ()
	
	$payload = @()
	foreach ($server in $spServer)
	{
		$role = 'Other'
		if ($server.Role -ne 'Invalid')
		{
			$role = $server.Role
		}
		$operatingSystem = Invoke-Command -ComputerName $server.Name { Get-CimInstance -ClassName Win32_OperatingSystem | Select-Object -ExpandProperty Caption }
		$memory = Invoke-Command -ComputerName $server.Name { (Get-CimInstance -ClassName 'Cim_PhysicalMemory' | Measure-Object -Property Capacity -Sum).Sum }
		$property = [ordered]@{
			'ServerName'  = $server | Select-Object -ExpandProperty Name
			'Role'	      = $role
			'OperatingSystem' = $operatingSystem
			'Memory'	  = $memory/1GB
		}
		$object = New-Object -TypeName PSObject -Property $property
		$payload += $object
	}
	
	$title = "Servers in farm"
	
	$output = New-Object -TypeName System.Management.Automation.PSObject
	$output | Add-Member -MemberType NoteProperty -Name 'Title' -Value $title
	$output | Add-Member -MemberType NoteProperty -Name 'Payload' -Value $payload
	Write-Output $output
}


function Get-SPIWebApplicationsAndSiteCollections
{
	[CmdletBinding()]
	param ()
	
	$payload = @()
	foreach ($webApplication in $spWebApplication)
	{
		$spSites = $spSite | Where-Object { $_.WebApplication.Name -eq ($webApplication | Select-Object -ExpandProperty Name) }
		foreach ($site in $spSites)
		{
			$siteAdmins = $site.Owner.DisplayName
			if ($site.SecondaryContact -ne $null)
			{
				$siteAdmins = $siteAdmins + "; " + $site.SecondaryContact.DisplayName
			}
			$property = [ordered]@{
				'WebApplication'  = $webApplication | Select-Object -ExpandProperty DisplayName
				'SiteCollection'  = $site.Url
				'SiteAdmins'	  = $siteAdmins
			}
			$object = New-Object -TypeName PSObject -Property $property
			$payload += $object
		}
		
	}
	
	$title = "Web applications and site collections"
	
	$output = New-Object -TypeName System.Management.Automation.PSObject
	$output | Add-Member -MemberType NoteProperty -Name 'Title' -Value $title
	$output | Add-Member -MemberType NoteProperty -Name 'Payload' -Value $payload
	Write-Output $output
}
